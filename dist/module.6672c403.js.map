{"version":3,"sources":["module.js"],"names":["today","Date","gettabledata","table","id","row","result","JSON","stringify","parse","getMonthlyMoney","ID","type","$","get","data","Object","StringtoInt","caltotalmoney","money","total","i","getMonth","getFullYear","x","base","parsed","parseInt","isNaN"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAC,IAAIC,IAAJ,EAAV;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,EAA7B,EAAiCC,GAAjC,EAAqC;AACjC,MAAIC,MAAM,GAACC,IAAI,CAACC,SAAL,CAAeL,KAAK,CAACE,GAAD,CAApB,CAAX;AACAC,EAAAA,MAAM,GAACC,IAAI,CAACE,KAAL,CAAWH,MAAX,CAAP;AACAA,EAAAA,MAAM,GAACA,MAAM,CAACF,EAAD,CAAb;AAEA,SAAOE,MAAP;AACH;;AAED,SAASI,eAAT,CAAyBC,EAAzB,EAA4BC,IAA5B,EAAiC;AAC7BC,EAAAA,CAAC,CAACC,GAAF,CAAM,gBAAN,EAAuB;AACnBH,IAAAA,EAAE,EAACA,EADgB;AAEnBC,IAAAA,IAAI,EAACA;AAFc,GAAvB,EAGE,UAACG,IAAD,EAAS;AACP,QAAG,QAAOA,IAAP,MAAeC,MAAlB,EAAyB;AACrB,aAAOC,WAAW,CAACf,YAAY,CAACa,IAAD,EAAO,MAAP,EAAe,CAAf,CAAb,EAAgC,EAAhC,CAAlB;AACH,KAFD,MAII,OAAO,CAAP;AACP,GATD;AAUH;;AAGD,SAASG,aAAT,CAAuBC,KAAvB,EAA6BP,IAA7B,EAAkC;AAC9B,MAAIQ,KAAK,GAAC,CAAV;;AACA,OAAK,IAAIC,CAAT,IAAcF,KAAd,EAAoB;AAChB,QAAIjB,YAAY,CAACiB,KAAD,EAAQ,MAAR,EAAgBE,CAAhB,CAAZ,KAAiCT,IAAjC,IAAyCV,YAAY,CAACiB,KAAD,EAAQ,OAAR,EAAgBE,CAAhB,CAAZ,KAAiCrB,KAAK,CAACsB,QAAN,EAA1E,IAA8FpB,YAAY,CAACiB,KAAD,EAAQ,MAAR,EAAeE,CAAf,CAAZ,KAAgCrB,KAAK,CAACuB,WAAN,EAAlI,EAAsJ;AAClJH,MAAAA,KAAK,GAACA,KAAK,GAACH,WAAW,CAACf,YAAY,CAACiB,KAAD,EAAQ,MAAR,EAAgBE,CAAhB,CAAb,EAAiC,EAAjC,CAAvB;AACH;AACJ;;AACD,SAAOD,KAAP;AACH;;AACD,SAASH,WAAT,CAAqBO,CAArB,EAAwBC,IAAxB,EAA8B;AAC1B,MAAMC,MAAM,GAAGC,QAAQ,CAACH,CAAD,EAAIC,IAAJ,CAAvB;;AACA,MAAIG,KAAK,CAACF,MAAD,CAAT,EAAmB;AAAE,WAAO,CAAP;AAAW;;AAChC,SAAOA,MAAP;AACD;;eAEW;AACVxB,EAAAA,YAAY,EAAZA,YADU;AACG;AACbQ,EAAAA,eAAe,EAAfA,eAFU;AAEM;AAChBQ,EAAAA,aAAa,EAAbA,aAHU;AAGI;AACdD,EAAAA,WAAW,EAAXA,WAJU,CAIC;;AAJD","file":"module.6672c403.js","sourceRoot":"../parcel","sourcesContent":["/*\nThis is the place to put some module for easy coding\nif you want to use the module in this file, please following the steps below\n    Put this code in the beginning of your js:import * as module from './module.js'\n    when you want to use the mod inside, use \n        module.functionname()\n    to call the function, some may need to put the parameter in the ()\n\n\nIf anyone want to add some new mod in the file, please set the function name as well-known \nas possible. Moreover, rememder to export function at the buttom of the code. \n\nIf it is convenient, use the annotation at the buttom of export to let other know what is \nthis function doing\n\nBy Maker\n*/\nvar today=new Date();\n\nfunction gettabledata(table, id, row){\n    let result=JSON.stringify(table[row])\n    result=JSON.parse(result)\n    result=result[id]\n    \n    return result\n}\n\nfunction getMonthlyMoney(ID,type){\n    $.get('./monthlymoney',{\n        ID:ID,\n        type:type\n    },(data) =>{\n        if(typeof(data)===Object){\n            return StringtoInt(gettabledata(data, 'cost', 0), 10)\n        }\n        else \n            return 0\n    })\n}\n\n\nfunction caltotalmoney(money,type){\n    let total=0\n    for (var i in money){\n        if (gettabledata(money, 'type', i)===type && gettabledata(money, 'month',i)===today.getMonth() && gettabledata(money, 'year',i)===today.getFullYear()){\n            total=total+StringtoInt(gettabledata(money, 'cost', i), 10)\n        }\n    }\n    return total\n}\nfunction StringtoInt(x, base) {\n    const parsed = parseInt(x, base)\n    if (isNaN(parsed)) { return 0; }\n    return parsed\n  }\n\nexport default{\n    gettabledata,//get id inside the row of column select from database\n    getMonthlyMoney,//get monthly fixed income(2),expenditure(3),saving(4)\n    caltotalmoney,//calculate total money\n    StringtoInt//transfer string to integer\n} \n"]}