{"version":3,"sources":["module.js"],"names":["today","Date","gettabledata","table","parameter","row","result","JSON","stringify","parse","getMonthlyMoney","ID","selection","month","type","$","get","data","String","total","i","console","log","StringtoInt","caltotalmoney","money","calprojectcomplete","x","parsed","parseInt","isNaN"],"mappings":"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","file":"module.6672c403.js","sourceRoot":"../parcel","sourcesContent":["/*\nThis is the place to put some module for easy coding\nif you want to use the module in this file, please following the steps below\n    Put this code in the beginning of your js:\n        import * as mod from './module.js'\n    when you want to use the mod inside, use \n        module.functionname()\n    to call the function, some may need to put the parameter in the ()\n\n\nIf anyone want to add some new mod in the file, please set the function name as well-known \nas possible. Moreover, rememder to export function at the buttom of the code. \n\nIf it is convenient, use the annotation at the buttom of export to let other know what is \nthis function doing\n\nBy Maker\n*/\nvar today=new Date();\n\nexport function gettabledata(table, parameter, row){\n    let result=JSON.stringify(table[row])\n    result=JSON.parse(result)\n    result=result[parameter]\n    \n    return result;\n}\n\nexport function getMonthlyMoney(ID,table,selection,month,type){\n    var result;\n    $.get('./monthlymoney',{\n        ID:ID,\n        table:table,\n        selection:selection,\n        month:month,\n        type:type\n    },(data) =>{\n        //var result=0;\n        if(typeof(data)!=String){\n            var total=0\n            //console.log('calculate:')\n            //console.log(typeof(data),selection)\n            for (var i in data){\n                console.log(StringtoInt(gettabledata(data, `${selection}`, i)))\n                //console.log(1)\n                //console.log(i,data)\n                total+=StringtoInt(gettabledata(data, `${selection}`, i))\n                i++;\n            }\n            //total=gettabledata(money,type,0)\n            console.log(`total:${total}`)\n            result=total\n        }\n        else{\n            result=0;\n        }\n        console.log(result)\n        return result;\n    })\n    \n}\n\nexport function caltotalmoney(ID,table,selection,month,type){\n    var money=getMonthlyMoney(ID,table,selection,month,type)\n    console.log(typeof(money))\n    var result=0;\n    \n    if(typeof(money)!=String){\n        var total=0\n        console.log('calculate:')\n        console.log(typeof(money),selection)\n        /*for (var i in money){\n            let temp=money[i]\n            console.log(1)\n            console.log(i,temp)\n            total=total+StringtoInt(gettabledata(temp, type, 0), 10)\n            //i++;\n        }*/\n        //total=gettabledata(money,type,0)\n\n            result=total\n        }\n    else{\n        result=0;\n    }\n    //console.log(result)\n    //return result;\n    \n}\n\nexport function calprojectcomplete(ID){\n    return //return .1f%\n}\nexport function StringtoInt(x) {\n    const parsed = parseInt(x, 10)\n    if (isNaN(parsed)) { return 0; }\n    return parsed\n}\n\nexport default{\n    getMonthlyMoney,//get money in each table, remember to use caltotalmoney to get in integer\n    caltotalmoney,//calculate total money\n    calprojectcomplete,//calculate project complete %(in .1f )\n    StringtoInt,//transfer string to integer\n    gettabledata//get id inside the row of column select from database\n} \n"]}